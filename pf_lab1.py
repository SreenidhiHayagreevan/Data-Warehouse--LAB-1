# -*- coding: utf-8 -*-
"""PF_LAB1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X3wfTNu3A9Eq2uORG79ManraZjV7LVAQ
"""

from airflow import DAG
from airflow.decorators import task
from airflow.providers.snowflake.hooks.snowflake import SnowflakeHook
from airflow.utils.dates import days_ago
from datetime import datetime

# Default arguments for the DAG
default_args = {
    'owner': 'airflow',
    'start_date': days_ago(1),
}

# Define the DAG
with DAG(
    dag_id='StockPredictionPipeline',
    default_args=default_args,
    schedule_interval='@daily',
    catchup=False,
    tags=['ML', 'Forecasting']
) as dag:

    def return_snowflake_conn():
        hook = SnowflakeHook(snowflake_conn_id='snowflake_conn')
        return hook.get_cursor()

    @task
    def train_model(cur, input_table, view_name, model_name):

        # SQL to create a view
        create_view_sql = f"""CREATE OR REPLACE VIEW {view_name} AS
                              SELECT TO_TIMESTAMP_NTZ(DATE) AS DATE_v1, CLOSE, SYMBOL
                              FROM {input_table};"""

        # SQL to create the forecast model
        create_model_sql = f"""CREATE OR REPLACE SNOWFLAKE.ML.FORECAST {model_name} (
                              INPUT_DATA => SYSTEM$REFERENCE('VIEW', '{view_name}'),
                              SERIES_COLNAME => 'SYMBOL',
                              TIMESTAMP_COLNAME => 'DATE_v1',
                              TARGET_COLNAME => 'CLOSE',
                              CONFIG_OBJECT => {{ 'ON_ERROR': 'SKIP' }}
                              );"""

        try:
            cur.execute(create_view_sql)
            cur.execute(create_model_sql)
            # Show evaluation metrics
            cur.execute(f"CALL {model_name}!SHOW_EVALUATION_METRICS();")
        except Exception as e:
            print(e)
            raise

    @task
    def generate_predictions(cur, model_name, input_table, pred_table, final_table):

        # SQL to make predictions
        make_prediction_sql = f"""BEGIN
                                  CALL {model_name}!FORECAST(
                                    FORECASTING_PERIODS => 7,
                                    CONFIG_OBJECT => {{'prediction_interval': 0.95}}
                                  );
                                  LET x := SQLID;
                                  CREATE OR REPLACE TABLE {pred_table} AS
                                  SELECT * FROM TABLE(RESULT_SCAN(:x));
                                  END;"""

        # SQL to create the final table
        create_final_table_sql = f"""CREATE OR REPLACE TABLE {final_table} AS
                                     SELECT SYMBOL, DATE, CLOSE AS actual, NULL AS forecast,
                                            NULL AS lower_bound, NULL AS upper_bound
                                     FROM {input_table}
                                     UNION ALL
                                     SELECT replace(series, '"', '') as SYMBOL, ts as DATE,
                                            NULL AS actual, forecast, lower_bound, upper_bound
                                     FROM {pred_table};"""

        try:
            cur.execute(make_prediction_sql)
            cur.execute(create_final_table_sql)
        except Exception as e:
            print(e)
            raise

    # Defining variables
    input_table = "DEV.RAW_DATA.LAB1"
    view_name = "DEV.RAW_DATA.Final_Prediction_v1"
    pred_table = "DEV.RAW_DATA.My_forecasts"
    model_name = "DEV.RAW_DATA.Final_stock_price"
    final_table = "DEV.RAW_DATA.Final_Prediction"
    cur = return_snowflake_conn()


    # Task execution
    train_model(cur, input_table, view_name, model_name)
    generate_predictions(cur, model_name, input_table, pred_table, final_table)